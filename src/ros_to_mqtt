#!/usr/bin/env python3
import json
import rospy
from rospy_message_converter import message_converter
import yaml
import rostopic
from functools import partial
import paho.mqtt.client as mqtt
import argparse
from colorama import Fore, Style
import importlib

# Set ip address here
host = "localhost"
port = 1883


def callback(msg_ros, topic, args, mqtt_client):

    if args['verbose']:
        print("Received " + Fore.RED + "ROS" + Style.RESET_ALL + " message on topic " + topic)

    # convert message to json
    msg_json = message_converter.convert_ros_message_to_dictionary(msg_ros)

    # if args['verbose']:
    # print('msg in json=\n' + str(json.dumps(msg_json, indent=2, sort_keys=True)))

    # publish a single message
    mqtt_client.publish(topic=topic, payload=json.dumps(msg_json))
    # publish.single(topic=topic, payload=json.dumps(msg_json), hostname=host)


def main():

    ap = argparse.ArgumentParser()  # Parse command line arguments
    ap.add_argument("-v", "--verbose", help="Prints the stdout_data of each command to the terminal.",
                    action='store_true', default=False)
    ap.add_argument("-ip", "--ipaddress", help="", default="127.0.0.1")
    args = vars(ap.parse_args())

    rospy.init_node('ros_to_mqtt', anonymous=False)

    with open('topics.yml') as f:
        config = yaml.load(f, Loader=yaml.FullLoader)

    # Different versions of mosquito use different formats
    try:
        client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION1)
    except:
        client = mqtt.Client()

    # client.tls_set('root.ca', certfile='c1.crt', keyfile='c1.key')
    client.connect(args['ipaddress'], 1883, 60)
    # client.connect(args['ipaddress'], 993, 60)

    def on_disconnect(client, userdata, rc):
        print("mqtt client: on_disconnect called")

    client.on_disconnect = on_disconnect

    for _, topic_data in config['data'].items():

        topic = topic_data['topic']
        topic_class = topic_data['class']

        # Wait for first message
        print("Waiting for first message on topic " + topic + ' ... ', end='')

        # Get the module and the function from the class name
        # For example, for this class
        #    tf2_msgs.msg._TFMessage.TFMessage
        # we need to extract the module name
        #    tf2_msgs.msg._TFMessage
        # and also the function name
        #    TFMessage

        lst = topic_class.split('.')
        first_part = '.'.join(lst[:-1])
        last_part = lst[-1]

        # print(lst)
        # print(first_part)
        # print(last_part)

        # module_name = topic_class
        module = importlib.import_module(first_part)

        _ = rospy.wait_for_message(topic, module.__getattribute__(last_part))
        print('received!')

        rospy.Subscriber(topic, module.__getattribute__(last_part), partial(
            callback, topic=topic, args=args, mqtt_client=client))

    print('Publishing ROS messages to mqtt ...')
    rospy.spin()


if __name__ == '__main__':
    main()
