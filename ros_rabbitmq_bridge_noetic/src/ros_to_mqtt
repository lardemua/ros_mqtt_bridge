#!/usr/bin/env python3
import json
import rospy
from rospy_message_converter import message_converter
from tf.msg import tfMessage
import yaml
import rostopic
from functools import partial
import paho.mqtt.publish as publish
import argparse
from colorama import Fore, Style

# Set ip address here
host = "localhost"


def callback(msg_ros, topic, args):

    if args['verbose']:
        print("Received " + Fore.RED + "ROS" + Style.RESET_ALL + " message on topic " + topic)

    # convert message to json
    msg_json = message_converter.convert_ros_message_to_dictionary(msg_ros)

    # if args['verbose']:
    # print('msg in json=\n' + str(json.dumps(msg_json, indent=2, sort_keys=True)))

    # publish a single message
    publish.single(topic=topic, payload=json.dumps(msg_json), hostname=host)


def main():

    ap = argparse.ArgumentParser()  # Parse command line arguments
    ap.add_argument("-v", "--verbose", help="Prints the stdout_data of each command to the terminal.",
                    action='store_true', default=False)
    args = vars(ap.parse_args())

    rospy.init_node('ros_to_mqtt', anonymous=False)

    with open('topics.yml') as f:
        config = yaml.load(f, Loader=yaml.FullLoader)

    for topic in config['topics']:
        # Get the topic type based on the topic name
        topic_class, _, _ = rostopic.get_topic_class(topic)
        if topic_class is None:
            raise ValueError('Unknown topic type for topic ' + topic + '. Are you sure this topic is being published?')
        print('Topic ' + topic + ' has class ' + str(topic_class))

        # Wait for first message
        print("Waiting for first message on topic " + topic + ' ... ', end='')
        _ = rospy.wait_for_message(topic, topic_class)
        print('received!')

        rospy.Subscriber(topic, topic_class, partial(callback, topic=topic, args=args))

    print('Publishing ROS messages to mqtt ...')
    rospy.spin()


if __name__ == '__main__':
    main()
